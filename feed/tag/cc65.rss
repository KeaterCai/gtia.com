<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GozAtari8</title><link>http://gtia.com/</link><description></description><atom:link href="http://gtia.com/feed/tag/cc65.rss" rel="self"></atom:link><lastBuildDate>Tue, 09 Dec 2014 13:36:00 +0100</lastBuildDate><item><title>Learning cc65</title><link>http://gtia.com/2014/12/09/learning-cc65/</link><description>&lt;p&gt;Tonight I've taken my first plunge into finally learning cc65 and writing software for the A8. I'm attempting to convert my ten liner from the ABBUC 2014 contest over to c. Here's the first part, it redefine's the character set to be inverse:&lt;/p&gt;
&lt;p&gt;:::c&lt;/p&gt;
&lt;p&gt;/&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;em&gt;&lt;em&gt; 
 * Crack My Luggage - C version
 &lt;/em&gt;
 * My attempt to rewrite my ten liner for the
 * ABBUC 2014 Ten Line competition for C, while
 * learning C.
 &lt;/em&gt;
 * 12/9/2014
 &lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;***/&lt;/p&gt;
&lt;h1&gt;include &lt;atari.h&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;conio.h&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;peekpoke.h&gt;&lt;/h1&gt;
&lt;p&gt;typedef unsigned char byte;&lt;/p&gt;
&lt;p&gt;void setup();&lt;/p&gt;
&lt;p&gt;int main()
{
    setup();
    gotoxy(2,0);
    cprintf("crack my luggage");&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cgetc();                    // Don&amp;#39;t end the program until a key is pressed
return(0);                  // All done!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;void setup() {
    unsigned int ch,i;
    byte a;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;_graphics(18);
POKE(559,0);                // Turn off screen
ch=PEEK(106)-16;
POKE(756,ch);
ch=ch*256;

for (i = 0; i &amp;lt; 1024; i++) { // Redfine character set, make it inverse
    a=127-PEEK(57344L+i);
    //if (a&amp;lt;0) { a=0; }
    POKE(ch+i,a);
}

for (i = 0; i &amp;lt; 8; i++) {   // Set space to hash pattern
    POKE(ch+i,85+(85*(i%2)));
    POKE(ch+i+80,127-PEEK(58016L+i));
}

POKEW(708,2710);            // Set colors
POKEW(710,3868);
POKE(559,34);               // Turn screen back on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mr.rcollins</dc:creator><pubDate>Tue, 09 Dec 2014 13:36:00 +0100</pubDate><guid>tag:gtia.com,2014-12-09:2014/12/09/learning-cc65/</guid><category>cc65</category></item></channel></rss>